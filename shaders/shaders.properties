oldLighting = false
underwaterOverlay = false
vignette = false
separateAo = false
oldHandLight=false

texture.deferred.depthtex1     = minecraft:textures/atlas/blocks.png
texture.deferred.depthtex2     = minecraft:textures/atlas/blocks_n.png
texture.deferred.colortex15     = minecraft:textures/atlas/blocks_s.png

uniform.vec2.resolution = vec2(viewWidth, viewHeight)
uniform.vec2.pixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

variable.float.sunVectorX = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunVectorY = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunVectorZ = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
variable.float.sunVectorNorm = 1.0 / sqrt((sunVectorX * sunVectorX) + (sunVectorY * sunVectorY) + (sunVectorZ * sunVectorZ))
uniform.vec3.sunVector = vec3(sunVectorX * sunVectorNorm, sunVectorY * sunVectorNorm, sunVectorZ * sunVectorNorm)

variable.float.moonVectorX = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonVectorY = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonVectorZ = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
variable.float.moonVectorNorm = 1.0 / sqrt((moonVectorX * moonVectorX) + (moonVectorY * moonVectorY) + (moonVectorZ * moonVectorZ))
uniform.vec3.moonVector = vec3(moonVectorX * moonVectorNorm, moonVectorY * moonVectorNorm, moonVectorZ * moonVectorNorm)

variable.float.shadowLightVectorX = gbufferModelViewInverse.0.0 * shadowLightPosition.x + gbufferModelViewInverse.1.0 * shadowLightPosition.y + gbufferModelViewInverse.2.0 * shadowLightPosition.z
variable.float.shadowLightVectorY = gbufferModelViewInverse.0.1 * shadowLightPosition.x + gbufferModelViewInverse.1.1 * shadowLightPosition.y + gbufferModelViewInverse.2.1 * shadowLightPosition.z
variable.float.shadowLightVectorZ = gbufferModelViewInverse.0.2 * shadowLightPosition.x + gbufferModelViewInverse.1.2 * shadowLightPosition.y + gbufferModelViewInverse.2.2 * shadowLightPosition.z
variable.float.shadowLightVectorNorm = 1.0 / sqrt((shadowLightVectorX * shadowLightVectorX) + (shadowLightVectorY * shadowLightVectorY) + (shadowLightVectorZ * shadowLightVectorZ))
uniform.vec3.shadowLightVector = vec3(shadowLightVectorX * shadowLightVectorNorm, shadowLightVectorY * shadowLightVectorNorm, shadowLightVectorZ * shadowLightVectorNorm)


sliders = UpscalingRes RayBounce SpecularSamples DiffuseSamples BlockLightShadowSharpness LensFlareStrength BloomStrength FireflyRejectionStrength ShadowSamples SSSIntensity SSSFalloff

program.world0/shadowcomp.enabled=IrradianceCaching 

screen = [RayTracing] [Filtering] [SunLighting] [TAA] [PostProcessing] [Voxelization] [Debug]

screen.RayTracing = DiffuseSamples SpecularSamples RayBounce RoughSpecular
screen.Filtering = TemporalFilter SpatialFilter IrradianceCaching <empty> <empty> <empty>  BlockLightShadowSharpness FireflyRejectionStrength 
screen.SunLighting = SSSIntensity SSSFalloff ShadowSamples
screen.TAA = TemporalAA UpscalingRes
screen.PostProcessing = LensFlareStrength BloomStrength ExposureMode
screen.Voxelization = VoxelizationFix VoxelLowerBound
screen.Debug = DebugIC WhiteWorld <empty> <empty> DirectLight IndirectLight Specular Emission Fog <empty> <empty> <empty> CosineSampling ShadowMapSunFloodFill TemporalResampling

size.buffer.colortex2=2048 4096